/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return getPomVersionName().contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getPomGroupId() {
    if (hasProperty('GROUP')){
        return GROUP
    }else if (android.libraryVariants != null && android.libraryVariants.size() > 0){
        return android.libraryVariants[0].applicationId
    }else if (android.applicationVariants != null && android.applicationVariants.size() > 0){
        return android.applicationVariants[0].applicationId
    }else{
        throw new InvalidUserDataException("You must set GROUP in gradle.properties file.")
    }
}

def getPomArtifactId() {
    if (hasProperty('POM_ARTIFACT_ID')){
        return POM_ARTIFACT_ID
    }else{
        throw new InvalidUserDataException("You must set POM_ARTIFACT_ID in gradle.properties file.")
    }
}

def getPomVersionName() {
    if (hasProperty('VERSION_NAME')){
        return VERSION_NAME
    }else if ( android.defaultConfig.versionName != null){
        return android.defaultConfig.versionName
    }else{
        throw new InvalidUserDataException("You must set VERSION_NAME in gradle.properties file.")
    }
}

def getPomVersionCode() {
    if (hasProperty('VERSION_CODE')){
        return VERSION_CODE
    }else if ( android.defaultConfig.versionCode != null){
        return android.defaultConfig.versionCode
    }else{
        throw new InvalidUserDataException("You must set VERSION_CODE in gradle.properties file.")
    }
}

def getPomPackaging() {
    if (hasProperty('POM_PACKAGING')){
        return POM_PACKAGING
    }else{
        return "aar"
    }
}

def getPomName() {
    if (hasProperty('POM_NAME')){
        return POM_NAME
    }else{
        throw new InvalidUserDataException("You must set POM_NAME in gradle.properties file.")
    }
}

def getPomDescription() {
    if (hasProperty('POM_DESCRIPTION')){
        return POM_DESCRIPTION
    }else{
        throw new InvalidUserDataException("You must set POM_DESCRIPTION in gradle.properties file.")
    }
}

def getPomUrl() {
    if (hasProperty('POM_URL')){
        return POM_URL
    }else{
        throw new InvalidUserDataException("You must set POM_URL in gradle.properties file.")
    }
}

def getPomScmUrl() {
    if (hasProperty('POM_SCM_URL')){
        return POM_SCM_URL
    }else{
        return getPomUrl();
    }
}

def getPomScmConnection() {
    if (hasProperty('POM_SCM_CONNECTION')){
        return POM_SCM_CONNECTION
    }else{
        throw new InvalidUserDataException("You must set POM_SCM_CONNECTION in gradle.properties file.")
    }
}

def getPomScmDevConnection() {
    if (hasProperty('POM_SCM_DEV_CONNECTION')){
        return POM_SCM_DEV_CONNECTION
    }else{
        return getPomScmConnection();
    }
}

def getPomLicenseName() {
    if (hasProperty('POM_LICENCE_NAME')){
        return POM_LICENCE_NAME
    }else{
        throw new InvalidUserDataException("You must set POM_LICENCE_NAME in gradle.properties file.")
    }
}

def getPomLicenseUrl() {
    if (hasProperty('POM_LICENCE_URL')){
        return POM_LICENCE_URL
    }else{
        throw new InvalidUserDataException("You must set POM_LICENCE_URL in gradle.properties file.")
    }
}

def getPomLicenseDist() {
    if (hasProperty('POM_LICENCE_DIST')){
        return POM_LICENCE_DIST
    }else{
        throw new InvalidUserDataException("You must set POM_LICENCE_DIST in gradle.properties file.")
    }
}

def getDeveloperId() {
    if (hasProperty('POM_DEVELOPER_ID')){
        return POM_DEVELOPER_ID
    }else{
        throw new InvalidUserDataException("You must set POM_DEVELOPER_ID in gradle.properties file.")
    }
}

def getDeveloperName() {
    if (hasProperty('POM_DEVELOPER_NAME')){
        return POM_DEVELOPER_NAME
    }else{
        throw new InvalidUserDataException("You must set POM_DEVELOPER_NAME in gradle.properties file.")
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = getPomGroupId()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersionName()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                def pomName = getPomName()
                def pomPackaging = getPomPackaging()
                def pomDescription = getPomDescription()
                def pomUrl = getPomUrl()
                def pomScmUrl = getPomScmUrl()
                def pomScmConnection = getPomScmConnection()
                def pomScmDevConnection = getPomScmDevConnection()
                def pomLicenseName = getPomLicenseName()
                def pomLicenseUrl = getPomLicenseUrl()
                def pomDistribution = getPomLicenseDist()
                def pomDeveloperId = getDeveloperId()
                def pomDeveloperName = getDeveloperName()

                pom.project {
                    name pomName
                    packaging pomPackaging
                    description pomDescription
                    url pomUrl

                    scm {
                        url pomScmUrl
                        connection pomScmConnection
                        developerConnection pomScmDevConnection
                    }

                    licenses {
                        license {
                            name pomLicenseName
                            url pomLicenseUrl
                            distribution pomDistribution
                        }
                    }

                    developers {
                        developer {
                            id pomDeveloperId
                            name pomDeveloperName
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}